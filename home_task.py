# Урок. Словари, множества и профилирование

# Задача 1: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.


n = int(input("Введите количество элементов первого множества: ")) # Ввод количества элементов первого и второго множеств
m = int(input("Введите количество элементов второго множества: "))

set1 = set()     # Ввод элементов первого множества
for i in range(n):
    element = int(input("Введите элемент первого множества: "))
    set1.add(element)

set2 = set()      # Ввод элементов второго множества
for i in range(m):
    element = int(input("Введите элемент второго множества: "))
    set2.add(element)

intersection = set1.intersection(set2)  # Вычисление пересечения множеств

result = list(intersection) # Преобразование результата в список и его сортировка 
result.sort()

print("Элементы, встречающиеся в обоих множествах отсортированы по возрастанию:")  # Вывод
for element in result:
    print(element)


# Задача 2: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.


# N = int(input()) # Считываем количество кустов

# berries = list(map(int, input().split())) # Считываем количество ягод на каждом кусте

# total_berries = [] # Создаем список для хранения сумм ягод с кустов и их соседей

# for i in range(N):   # Проходим по каждому кусту

#     collected = berries[i] + berries[(i + 1) % N] + berries[(i - 1) % N]  # Вычисляем сумму ягод с текущего куста и его двух соседей

#     total_berries.append(collected) # Добавляем эту сумму в список

# max_collected = max(total_berries) # Находим максимальное значение в списке


# print(max_collected) # Выводим максимальное число собранных ягод
